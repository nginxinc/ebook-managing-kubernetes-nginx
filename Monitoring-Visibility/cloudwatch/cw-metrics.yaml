apiVersion: v1
kind: Namespace
metadata:
  name: amazon-cloudwatch
  labels:
    name: amazon-cloudwatch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cwagent-prometheus
  namespace: amazon-cloudwatch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cwagent-prometheus-role
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "endpoints"]
    verbs: ["list", "watch"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["nodes/stats", "configmaps", "events"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cwagent-clusterleader"]
    verbs: ["get","update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cwagent-prometheus-role-binding
subjects:
  - kind: ServiceAccount
    name: cwagent-prometheus
    namespace: amazon-cloudwatch
roleRef:
  kind: ClusterRole
  name: cwagent-prometheus-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  cwagentconfig.json: |
    {
      "agent": {
        "debug": true,
        "region": "us-west-1"
      },
      "logs": {
        "metrics_collected": {
          "prometheus": {
            "prometheus_config_path": "/etc/prometheusconfig/prometheus.yaml",
            "log_group_name": "nginx-metrics",
            "cluster_name": "nginx-demo-cluster",
            "emf_processor": {
              "metric_declaration": [
                {
                  "source_labels": ["job"],
                  "label_matcher": "nsm",
                  "dimensions": [["PodNamespace","PodName", "DeploymentName"]],
                  "metric_selectors": [
                    "^nginx*"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "nic",
                  "dimensions": [["PodNamespace","PodName"]],
                  "metric_selectors": [
                    "^nginx*"
                  ]
                }
              ]
            }
          }
        },
        "force_flush_interval": 5
      }
    }
kind: ConfigMap
metadata:
  name: prometheus-cwagentconfig
  namespace: amazon-cloudwatch
---
apiVersion: v1
data:
  prometheus.yaml: |
    global:
      scrape_interval: 1m
      scrape_timeout: 5s
    scrape_configs:
    - job_name: nsm
      sample_limit: 10000
      metrics_path: /metrics
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
        - source_labels: [ __meta_kubernetes_pod_container_name ]
          action: keep
          regex: '^nginx-mesh-sidecar$'
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: PodNamespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: PodName
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_label_nsm_nginx_com_deployment
          target_label: DeploymentName
    - job_name: nic
      sample_limit: 10000
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
        - source_labels: [ __meta_kubernetes_pod_container_name ]
          action: keep
          regex: '^nginx-plus-ingress$'
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: PodNamespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: PodName
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: amazon-cloudwatch
---
apiVersion: v1
data:
  credentials: |
    [AmazonCloudWatchAgent]
    aws_access_key_id = << AWS_access_key >>
    aws_secret_access_key =  << AWS_secret_access_key >>
  config: |
    [AmazonCloudWatchAgent]
    region = us-west-1
kind: ConfigMap
metadata:
  name: aws-credentials
  namespace: amazon-cloudwatch
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cwagent-prometheus
  namespace: amazon-cloudwatch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cwagent-prometheus
  template:
    metadata:
      labels:
        app: cwagent-prometheus
    spec:
      containers:
        - name: cloudwatch-agent
          image: amazon/cloudwatch-agent:1.247349.0b251399
          imagePullPolicy: Always
          resources:
            limits:
              cpu:  1000m
              memory: 1000Mi
            requests:
              cpu: 200m
              memory: 200Mi
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CI_VERSION
              value: "k8s/1.3.3"
          volumeMounts:
            - name: prometheus-cwagentconfig
              mountPath: /etc/cwagentconfig
            - name: prometheus-config
              mountPath: /etc/prometheusconfig
            - name: aws-credentials
              mountPath: /root/.aws
      volumes:
        - name: prometheus-cwagentconfig
          configMap:
            name: prometheus-cwagentconfig
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: aws-credentials
          configMap:
            name: aws-credentials
      terminationGracePeriodSeconds: 60
      serviceAccountName: cwagent-prometheus
